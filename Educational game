#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include <cstring>
#include <cstdlib>
#include <ctime>
using namespace std;

void credits(string &);
void menu(string, int &, int &, double &);
void getStats(ofstream &, ifstream &, string &, int &, int &, double &);
void getUserName(string &);
void validateResponse(string &);
int validateAnswer(string);
int checkAnswer(int, int);
void updateStats(int, int &, int &, double&);
void displayStats(string, int, int, double);
void saveStats(ofstream &, string, int, int, double);
int genAdd();
int genSub();
int genMulti();
int genDiv();

int main(){
    
    ofstream outputFile;
    ifstream inputFile;
    int right = 0, wrong = 0;
    double* wins = 0;
    string name, play = "y";

    //srand() is used to create random number every moment.
    unsigned seed = time(0);
    srand(seed);

    wins = new double;
    *wins = 0.00;

    delete wins;

  //The do executes the the body even if the condition is false
do
{
    credits(play);
if (play == "y" || play == "Y")
{
    getStats(outputFile, inputFile, name, right, wrong, *wins);

    menu(name, right, wrong, *wins);

    saveStats(outputFile, name, right, wrong, *wins);

    //Reset the stats of the next player
   
    right = 0;
    wrong = 0;
    *wins = 0.00;

        }
    } while (play == "M" || play == "m");
    return 0;
}

void credits(string &play)
{
    cout << "\n**************************************" << endl;
    cout << "         Press M or m to play.        " << endl;
    cout << "         Press any key to exit.       " << endl;
    cout << "\n**************************************" << endl;
    
    getline(cin, play);
}

//Retrieve user data function.
void getStats(ofstream &outputFile, ifstream &inputFile, string &name, int &correct, int &wrong, double & wins)
{
    string userName;
    getUserName(userName);
    name = userName;
    userName += ".txt";
    
    inputFile.open(userName.c_str());
    //If the inputfile with the user name does not exist, the program will proceed to the game with out retrieving the user data file.
    if (inputFile.is_open())
    {
        inputFile >> name;
        inputFile >> correct;
        inputFile >> wrong;
        inputFile >> wins;
        inputFile.close();
       
        system("cls");
        
        cout <<"************* Welcome back, " << left << setw(10) << name <<"!************" <<endl;
      
        }else{

            system("cls");
            
        cout <<"************Hello, "<< name << "! Let's play!**********\n" << endl;
    
            }
        }

        //menu function.
        void menu(string name, int &correct, int &wrong, double &wins)
        {
            
            string makeChoice, answer;
            int correctAnswer, answerNumber, rightOrWrong = 0;
            
            do{
                cout << "*****************Game Menu********************\n" << endl;
                cout << "     [1] Addition                      " << endl;      
                cout << "     [2] Subtraction                   " << endl;
                cout << "     [3] Multiplication                " << endl;
                cout << "     [4] Division                      " << endl;
                cout << "     [5] Current statistic             " << endl;
                cout << "     [X] Save and return to home\n     " << endl;
                cout << "***************************************" << endl;

                getline(cin, makeChoice);
                
                validateResponse(makeChoice);
                // choice 1 is Addition.
                if (makeChoice == "1"){
                    for (int i = 0; i < 3; i++)
                    {
                    //Set the correct answer to the returned value from the gen Addition function. 
                    correctAnswer = genAdd();
                    getline(cin, answer);
                    answerNumber = validateAnswer(answer);
                    //rightOrWrong variable determines whether the user's answer is correct or not.
                    rightOrWrong = checkAnswer(correctAnswer, answerNumber);
                    //Calls updateStats function.
                    updateStats(rightOrWrong, correct, wrong, wins);
                    }
                    

                    }
                    //Choice 2 is subtraction
                    else if (makeChoice == "2"){
                        for (size_t i = 0; i < 3; i++)
                        {
                        correctAnswer = genSub();
                        getline(cin, answer);
                        answerNumber = validateAnswer(answer);
                        rightOrWrong = checkAnswer(correctAnswer, answerNumber);
                        updateStats(rightOrWrong, correct, wrong, wins);
                        
                        }
                        
                        
                        }//Choice 3 is multiplication.
                        else if (makeChoice == "3"){
                      for (size_t i = 0; i < 3; i++)
                      {
                        correctAnswer = genMulti();
                        getline(cin, answer);
                        answerNumber = validateAnswer(answer);
                        rightOrWrong = checkAnswer(correctAnswer, answerNumber);
                        updateStats(rightOrWrong, correct, wrong, wins);
                        
                      }
                      
                        }//choice 4 is division.
                        else if (makeChoice == "4"){
                          for (size_t i = 0; i < 3; i++)
                          {
                            correctAnswer = genDiv();
                            getline(cin, answer);
                            answerNumber = validateAnswer(answer);
                            rightOrWrong = checkAnswer(correctAnswer, answerNumber);
                            updateStats(rightOrWrong, correct, wrong, wins);
                          }
                          
                            
                            }
                            //Displays user's current progress  statistics.
                            else if (makeChoice == "5"){
                                //clears the screen, and call the displayStats function.
                                system("cls");
                                displayStats(name, correct, wrong, wins);

                                system("cls");
                                cout << "***************************************" << endl;
                               
                                }//Returning to the home screen.
                                else{
                                    system("cls");
                                }
                                } while (!(makeChoice == "x" || makeChoice == "X")); 
                            }
                            
//Function that gets the user name.
                        void getUserName(string &userName){
                            //Clears screen to allow room to ask the user for his/her name.
                            system("cls");

                            cout << "Enter your name: " << endl;
                            getline(cin, userName);
                        }                      

//Function that validates user's input for menu selection.
void validateResponse(string &makeChoice){
    //Simple. only 1, 2, 3, 4, 5, x, X is allowed.
    while (!(makeChoice == "1" || makeChoice == "2" || 
    makeChoice == "3" || makeChoice == "4" || makeChoice == "5" || 
    makeChoice == "x" || makeChoice == "X")){
        system("cls");


cout << "***   Please enter your choice.    ****" << endl;
cout << "**************Game Menu**************\n" << endl;
cout << "     [1] Addition                      " << endl;      
cout << "     [2] Subtraction                   " << endl;
cout << "     [3] Multiplication                " << endl;
cout << "     [4] Division                      " << endl;
cout << "     [5] Current statistic             " << endl;
cout << "     [X] Save and return to home\n     " << endl;
cout << "***************************************" << endl;

getline(cin, makeChoice);
}
}
//function that returns the users validated answers. 
    int validateAnswer(string answer){
    int Length, answerNumber = 0, counter = 0;
    char nextChar;
    //Finding how many characters there are at the user's input.
    Length = answer.length();
    //Input Validation.
    while (counter < Length || counter == 0){
        //Allows only numbers.
        if (!isdigit(answer[counter])){
            cout << "Number cannot be negative." << endl;
            getline(cin, answer);
            Length = answer.length();

            counter = 0;

            }else{
                counter++;
}
}
//Converts the user's answer to int.
for (int counter = 0; counter < Length; counter++){

    nextChar = answer[counter];

    answerNumber = answerNumber * 10 + (nextChar - '0');
    }
    //Return the answer as an integer value.
    return answerNumber;
    }

    //Function that checks whether the user's answer is correct or wrong. 
    int checkAnswer(int correctAnswer, int answerNumber){
       system("cls");

if (correctAnswer == answerNumber){

    cout << "***************************************" << endl;
    cout << "                Correct                " << endl;
    cout << "***************************************" << endl;

    return 1;
    }
    else{

    cout << "***************************************" << endl;
    cout << "                 Wrong                 " << endl;
    cout << "***************************************" << endl;

        return 0;
}

}    
//Function that updates the user's statistics.
void updateStats(int rightOrWrong, int &correct, int &wrong, double &wins){
    //By using the rightOrWrong variable, update the statistic of the user.
    if (rightOrWrong == 1){

        correct += 1;
        wins += 0.05;

        }else{

            wrong += 1;
            wins -= 0.03;
}
}    
//This is a function that displays the user's current status. 

void displayStats(string name, int correct, int wrong, double wins){

    cout << "***************Progress**************\n" << endl;
    cout << "   Name:                  " << left << setw(10) << name << " " <<endl;
    cout << "   Total correct answer:  " << left << setw(3) << correct << "     " << endl;
    cout << "   Total wrong answer:    " << left << setw(3) << wrong << "       " << endl;
    cout << "   Total wins:           $" << left << setw(6) << fixed << showpoint << setprecision(2) << wins << "    :" << endl;
    cout << "*************************************\n" << endl;

    system("pause");
}

//Function that saves the current progress to text file when exiting. 
void saveStats(ofstream &outputFile, string name, int correct, int wrong, double wins){
    string userName;
    userName = name + ".txt";
    outputFile.open(userName.c_str());
    
    outputFile << name << endl;
    outputFile << correct << endl;
    outputFile << wrong << endl;
    outputFile << fixed << showpoint << setprecision(2) << wins << endl;
    
    outputFile.close();
}
//Function that generates the addition problems.
int genAdd(){
    system("cls");
    
    int num1, num2, correctAnswer;
    num1 = (rand() % 10) + 1;
    num2 = (rand() % 10) + 1;
    
    correctAnswer = num1 + num2;
    //Display the chosen option

    cout << "************Welcome to addition*****************" << endl;
    cout << "             " << setw(2) << num1 << " + " << setw(2) << num2 << " = ?             " << endl;
    
    return correctAnswer;
}

//Function that generate subtraction problem.
int genSub(){
    system("cls");

    int num1, num2, correctAnswer; 
    //num2 ranges from 1 to num1 because we need num2 to be less than num1.
    num1 = (rand() % 10) + 1;
    num2 = (rand() % num1) + 1;
    
    correctAnswer = num1 - num2;

    cout << "***************Welcome to subtraction***************" << endl;
    cout << "             " << setw(2) << num1 << " - " << setw(2) << num2 << " = ?             " << endl;
    
    return correctAnswer;
    }

    //Function that generates multiplication.
    int genMulti(){
        system("cls");
        
        int num1, num2, correctAnswer;
        
        num1 = (rand() % 10) + 1;
        num2 = (rand() % 10) + 1;
        
        correctAnswer = num1 * num2;
        

        cout << "***************Welcome to muliplication***************" << endl;
        cout << "             " << setw(2) << num1 << " x " << setw(2) << num2 << " = ?             " << endl;
        
        return correctAnswer;
    }

    //Function that generates division.
    int genDiv(){
        system("cls");
        
        int num1, num2, correctAnswer;
        //num2 generates a number that ranges from 1 to 10 and it is multiplied by num1. 
        //the former number of num2 before multiplying, that value will be the correct answer.
        num1 = (rand() % 10) + 1;
        num2 = ((rand() % 10) + 1) * num1;

        //set sthe correct answer.x

        correctAnswer = num2 / num1;
        
        cout << "***************Welcome to division***************" << endl;
        cout << "             " << setw(2) << num2 << " / " << setw(2) << num1 << " = ?             " << endl;
        
        return correctAnswer;
        }
